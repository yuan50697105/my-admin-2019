/*
 * This file is generated by jOOQ.
 */
package org.yuan.boot.app.db.module.mybatis.jpa.jooq.mapper.mapper.module.dsl.tables;


import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;
import org.yuan.boot.app.db.module.mybatis.jpa.jooq.mapper.mapper.module.dsl.Indexes;
import org.yuan.boot.app.db.module.mybatis.jpa.jooq.mapper.mapper.module.dsl.Keys;
import org.yuan.boot.app.db.module.mybatis.jpa.jooq.mapper.mapper.module.dsl.MyAdmin_01;
import org.yuan.boot.app.db.module.mybatis.jpa.jooq.mapper.mapper.module.dsl.tables.records.AdminPermissionRecord;

import javax.annotation.Generated;
import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;


/**
 * admin_permission
 */
@Generated(
        value = {
                "http://www.jooq.org",
                "jOOQ version:3.12.3"
        },
        comments = "This class is generated by jOOQ"
)
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class AdminPermission extends TableImpl<AdminPermissionRecord> {

    /**
     * The reference instance of <code>my_admin_01.admin_permission</code>
     */
    public static final AdminPermission ADMIN_PERMISSION = new AdminPermission();
    private static final long serialVersionUID = 432800964;
    /**
     * The column <code>my_admin_01.admin_permission.id</code>. id
     */
    public final TableField<AdminPermissionRecord, Long> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "id");
    /**
     * The column <code>my_admin_01.admin_permission.create_user</code>. createUser
     */
    public final TableField<AdminPermissionRecord, String> CREATE_USER = createField(DSL.name("create_user"), org.jooq.impl.SQLDataType.VARCHAR(50), this, "createUser");
    /**
     * The column <code>my_admin_01.admin_permission.update_user</code>. updateUser
     */
    public final TableField<AdminPermissionRecord, String> UPDATE_USER = createField(DSL.name("update_user"), org.jooq.impl.SQLDataType.VARCHAR(50), this, "updateUser");
    /**
     * The column <code>my_admin_01.admin_permission.create_time</code>. createTime
     */
    public final TableField<AdminPermissionRecord, Timestamp> CREATE_TIME = createField(DSL.name("create_time"), org.jooq.impl.SQLDataType.TIMESTAMP, this, "createTime");
    /**
     * The column <code>my_admin_01.admin_permission.update_time</code>. updateTime
     */
    public final TableField<AdminPermissionRecord, Timestamp> UPDATE_TIME = createField(DSL.name("update_time"), org.jooq.impl.SQLDataType.TIMESTAMP, this, "updateTime");
    /**
     * The column <code>my_admin_01.admin_permission.name</code>. name
     */
    public final TableField<AdminPermissionRecord, String> NAME = createField(DSL.name("name"), org.jooq.impl.SQLDataType.VARCHAR(50), this, "name");

    /**
     * Create a <code>my_admin_01.admin_permission</code> table reference
     */
    public AdminPermission() {
        this(DSL.name("admin_permission"), null);
    }

    /**
     * Create an aliased <code>my_admin_01.admin_permission</code> table reference
     */
    public AdminPermission(String alias) {
        this(DSL.name(alias), ADMIN_PERMISSION);
    }

    /**
     * Create an aliased <code>my_admin_01.admin_permission</code> table reference
     */
    public AdminPermission(Name alias) {
        this(alias, ADMIN_PERMISSION);
    }

    private AdminPermission(Name alias, Table<AdminPermissionRecord> aliased) {
        this(alias, aliased, null);
    }

    private AdminPermission(Name alias, Table<AdminPermissionRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("admin_permission"));
    }

    public <O extends Record> AdminPermission(Table<O> child, ForeignKey<O, AdminPermissionRecord> key) {
        super(child, key, ADMIN_PERMISSION);
    }

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AdminPermissionRecord> getRecordType() {
        return AdminPermissionRecord.class;
    }

    @Override
    public Schema getSchema() {
        return MyAdmin_01.MY_ADMIN_01;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.ADMIN_PERMISSION_PRIMARY);
    }

    @Override
    public UniqueKey<AdminPermissionRecord> getPrimaryKey() {
        return Keys.KEY_ADMIN_PERMISSION_PRIMARY;
    }

    @Override
    public List<UniqueKey<AdminPermissionRecord>> getKeys() {
        return Arrays.<UniqueKey<AdminPermissionRecord>>asList(Keys.KEY_ADMIN_PERMISSION_PRIMARY);
    }

    @Override
    public AdminPermission as(String alias) {
        return new AdminPermission(DSL.name(alias), this);
    }

    @Override
    public AdminPermission as(Name alias) {
        return new AdminPermission(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public AdminPermission rename(String name) {
        return new AdminPermission(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public AdminPermission rename(Name name) {
        return new AdminPermission(name, null);
    }

    // -------------------------------------------------------------------------
    // Row6 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row6<Long, String, String, Timestamp, Timestamp, String> fieldsRow() {
        return (Row6) super.fieldsRow();
    }
}
